apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    ocelot.social/selector: deployment-ocelot-social-neo4j
  name: neo4j
  namespace: ocelot-social
spec:
  progressDeadlineSeconds: 2147483647
  replicas: 1
  revisionHistoryLimit: 2147483647
  selector:
    matchLabels:
      ocelot.social/selector: deployment-ocelot-social-neo4j
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: neo4j-data
      creationTimestamp: null
      labels:
        ocelot.social/selector: deployment-ocelot-social-neo4j
      name: neo4j
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: configmap
        image: ocelotsocialnetwork/develop-neo4j:latest  # for develop
        # image: ocelotsocialnetwork/develop-neo4j:0.6.3  # for production or staging
        imagePullPolicy: Always  # for develop or staging
        # imagePullPolicy: IfNotPresent  # for production
        name: neo4j
        ports:
        - containerPort: 7687
          protocol: TCP
        - containerPort: 7474
          protocol: TCP
        resources:
          # see description and add cpu https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          # see requirements for Neo4j v3.5.14 https://neo4j.com/docs/operations-manual/3.5/installation/requirements/
          limits:
            memory: 2G
          requests:
            memory: 2G
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data/
          name: neo4j-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: neo4j-data
        persistentVolumeClaim:
          claimName: neo4j-data-claim
status: {}
